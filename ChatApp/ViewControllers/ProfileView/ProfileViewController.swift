//
//  ViewController.swift
//  ChatApp
//
//  Created by –ò–≤–∞–Ω –õ–µ–±–µ–¥–µ–≤ on 07/02/2019.
//  Copyright ¬© 2019 –ò–≤–∞–Ω –õ–µ–±–µ–¥–µ–≤. All rights reserved.
//

import UIKit
import AVFoundation

class ProfileViewController: UIViewController {
    
    @IBOutlet weak var profileImageView: CustomImageView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var editButton: UIButton!
    @IBOutlet weak var chooseProfileImageButton: UIButton!
    
    let defaultProfileImage = UIImage(named: "placeholder-user")
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        //print(editButton.frame)
        /*
            Unexpectedly found nil while unwrapping an Optional value
            –≠—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∫ —Å–≤–æ–∏–º –≤—å—é, –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–∞ —Å—Ç–æ—Ä–∏–±–æ—Ä–¥–∞—Ö,
            –≤ —Ñ—É–Ω–∫—Ü–∏–∏ loadView, –∞ –Ω–µ –≤ init'–µ
         */
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        
        Debugger.shared.Print("editButton frame in viewDidLoad: \(editButton.frame)")
        
        setupUI()
        profileImageView.openBlind()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        Debugger.shared.Print("editButton frame in viewDidAppear: \(editButton.frame)")
        /*
            –ü–æ—Ç–æ–º—É —á—Ç–æ –≤–æ viewDidLoad –º—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ view —Å–æ storyboard'–∞, –∞ —Ç–∞–º —É –Ω–∞—Å iPhone SE, –∞
            autolayout –∫ —Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É –µ—â–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª
         */
    }
    
    
    func setupUI() {
        chooseProfileImageButton.setImage(UIImage(named: "photo-camera-icon"), for: .normal)
        chooseProfileImageButton.layer.cornerRadius = 16
        chooseProfileImageButton.layer.borderWidth = 1
        chooseProfileImageButton.layer.borderColor = UIColor.white.cgColor
        
        editButton.layer.cornerRadius = 8
        editButton.layer.borderColor = UIColor.black.cgColor
        editButton.layer.borderWidth = 1
        
        profileImageView.layer.cornerRadius = 16
        profileImageView.layer.masksToBounds = true
        profileImageView.image = defaultProfileImage
        
        nameLabel.text = "–ò–≤–∞–Ω –õ–µ–±–µ–¥–µ–≤"
        
        statusLabel.text = "–ª—é–±–ª—é —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µüî•üî• –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–æüòúüòú –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ üíïüíïüòéüëå–≥—Ä–∞—Ñ—ãüòçüòçüò≤ —Ä–µ–∫—É—Ä—Å–∏—è üòàüòà üìàüòÜü§ò–¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞üíóüíó"
    }
    
    @IBAction func dismissButtonTapped(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    func createUIImagePickerController(delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate),
                                       sourceType: UIImagePickerController.SourceType,
                                       allowEditing: Bool = true)
        -> UIImagePickerController {
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = delegate
        imagePicker.sourceType = sourceType
        imagePicker.allowsEditing = allowEditing
        return imagePicker
    }
    
    func deleteProfileImage() {
        profileImageView.closeBlind(completionHandler: {
            self.profileImageView.image = self.defaultProfileImage
            self.profileImageView.openBlind()
        })
    }
    
    func openCamera()
    {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–º–µ—Ä—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ */
        guard UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.camera) else {
            let noCameraAlert = UIAlertController(title: "–í–Ω–∏–º–∞–Ω–∏–µ", message: "–ù–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–º–µ—Ä–∞", preferredStyle: .alert)
            noCameraAlert.addAction(UIAlertAction(title: "–û–ö", style: .default, handler: nil))
            self.present(noCameraAlert, animated: true, completion: nil)
            return
        }
        
        /*
            –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑–∞—Ç—å alert,
            –∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–º–µ—Ä—ã.
        */
        guard AVCaptureDevice.authorizationStatus(for: .video) == .authorized else {
            if AVCaptureDevice.authorizationStatus(for: .video) == .notDetermined {
                AVCaptureDevice.requestAccess(for: .video) { success in
                    if success {
                        self.openCamera()
                    }
                }
            } else {
                let noCameraAccessAlert = UIAlertController(title: "–í–Ω–∏–º–∞–Ω–∏–µ",
                                              message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ. –ò–∑–º–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                                              preferredStyle: .alert)
                noCameraAccessAlert.addAction(UIAlertAction(title: "–û–ö", style: .default, handler: nil))
                self.present(noCameraAccessAlert, animated: true, completion: nil)
            }
            return
        }
        
        profileImageView.closeBlind()
        self.present(self.createUIImagePickerController(delegate: self, sourceType: .camera),
                     animated: true, completion: nil)
    }
    
    func openGallery() {
        
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—Ç–µ–∫–µ */
        guard UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary) else {
            let noGalleryAccessAlert  = UIAlertController(title: "–í–Ω–∏–º–∞–Ω–∏–µ",
                                                          message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—Ç–µ–∫–µ.",
                                                          preferredStyle: .alert)
            noGalleryAccessAlert.addAction(UIAlertAction(title: "–û–ö", style: .default, handler: nil))
            self.present(noGalleryAccessAlert, animated: true, completion: nil)
            return
        }
        
        profileImageView.closeBlind()
        self.present(self.createUIImagePickerController(delegate: self, sourceType: .photoLibrary),
                     animated: true, completion: nil)
    }
    
    @IBAction func chooseProfileImageButtonTapped(_ sender: Any) {
        Debugger.shared.Print("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        
        let imageAlert = UIAlertController(title: "–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", message: nil, preferredStyle: .actionSheet)
        imageAlert.addAction(UIAlertAction(title: "–ö–∞–º–µ—Ä–∞", style: .default, handler: { _ in
            self.openCamera()
        }))
        
        imageAlert.addAction(UIAlertAction(title: "–ú–µ–¥–∏–∞—Ç–µ–∫–∞", style: .default, handler: { _ in
            self.openGallery()
        }))
        
        let deleteProfileImageAction = UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", style: .default, handler: { _ in
            self.deleteProfileImage()
        })
        deleteProfileImageAction.isEnabled = (profileImageView.image != defaultProfileImage)
        deleteProfileImageAction.setValue(UIColor.red, forKey: "titleTextColor")
        imageAlert.addAction(deleteProfileImageAction)
        
        imageAlert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∏—Ç—å", style: .cancel, handler: nil))
        
        self.present(imageAlert, animated: true, completion: nil)
    }
    
}
